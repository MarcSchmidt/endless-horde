var g=Object.defineProperty;var p=(o,e,t)=>e in o?g(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var a=(o,e,t)=>(p(o,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function t(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(i){if(i.ep)return;i.ep=!0;const r=t(i);fetch(i.href,r)}})();class h{constructor(e=0,t=0){a(this,"x");a(this,"y");this.x=e,this.y=t}clone(){return new h(this.x,this.y)}add(e){return this.x+=e.x,this.y+=e.y,this}subtract(e){return this.x-=e.x,this.y-=e.y,this}multiply(e){return this.x*=e,this.y*=e,this}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalize(){const e=this.length();return e>0&&(this.x/=e,this.y/=e),this}distanceTo(e){const t=this.x-e.x,s=this.y-e.y;return Math.sqrt(t*t+s*s)}set(e,t){return this.x=e,this.y=t,this}static add(e,t){return new h(e.x+t.x,e.y+t.y)}static subtract(e,t){return new h(e.x-t.x,e.y-t.y)}static multiply(e,t){return new h(e.x*t,e.y*t)}static random(e,t,s,i){return new h(Math.random()*(t-e)+e,Math.random()*(i-s)+s)}}class c{constructor(e=0,t=0){a(this,"id");a(this,"position");a(this,"velocity");a(this,"active");this.id=this.generateId(),this.position=new h(e,t),this.velocity=new h(0,0),this.active=!0}generateId(){return Math.random().toString(36).substr(2,9)}update(e){if(!this.active)return;const t=e/1e3;this.position.add(h.multiply(this.velocity,t))}render(e){this.active&&(e.save(),e.fillStyle="#ffffff",e.fillRect(this.position.x-5,this.position.y-5,10,10),e.restore())}isInBounds(e,t){return this.position.x>=0&&this.position.x<=e&&this.position.y>=0&&this.position.y<=t}destroy(){this.active=!1}}class f extends c{constructor(t,s,i,r,n){super(t,s);a(this,"speed");a(this,"baseSpeed");a(this,"targetPosition");a(this,"color");a(this,"_size");a(this,"canvasWidth");a(this,"canvasHeight");a(this,"retargetTimer");a(this,"retargetInterval");a(this,"_health");a(this,"_maxHealth");a(this,"_soulValue");a(this,"areaLevel");if(n)this.baseSpeed=n.walkerSpeed,this._health=n.walkerHealth,this._maxHealth=n.walkerHealth,this._soulValue=n.soulMultiplier,this.areaLevel=n.id,this.color=n.walkerColors[Math.floor(Math.random()*n.walkerColors.length)];else{this.baseSpeed=50,this._health=1,this._maxHealth=1,this._soulValue=1,this.areaLevel=0;const l=["#ff6b6b","#4ecdc4","#45b7d1","#96ceb4","#feca57","#ff9ff3","#54a0ff"];this.color=l[Math.floor(Math.random()*l.length)]}this.speed=this.baseSpeed+(Math.random()-.5)*this.baseSpeed*.4,this.targetPosition=new h(t,s),this._size=8+Math.random()*8,this.canvasWidth=i,this.canvasHeight=r,this.retargetTimer=0,this.retargetInterval=2e3+Math.random()*3e3,this.setRandomTarget()}setRandomTarget(){this.targetPosition=h.random(this._size,this.canvasWidth-this._size,this._size,this.canvasHeight-this._size)}update(t){if(!this.active)return;this.retargetTimer+=t,(this.retargetTimer>=this.retargetInterval||this.position.distanceTo(this.targetPosition)<10)&&(this.setRandomTarget(),this.retargetTimer=0,this.retargetInterval=2e3+Math.random()*3e3);const s=h.subtract(this.targetPosition,this.position);s.length()>1?(s.normalize().multiply(this.speed),this.velocity=s):this.velocity.set(0,0),super.update(t),this.keepInBounds()}keepInBounds(){const t=this._size/2;this.position.x<t?(this.position.x=t,this.setRandomTarget()):this.position.x>this.canvasWidth-t&&(this.position.x=this.canvasWidth-t,this.setRandomTarget()),this.position.y<t?(this.position.y=t,this.setRandomTarget()):this.position.y>this.canvasHeight-t&&(this.position.y=this.canvasHeight-t,this.setRandomTarget())}render(t){if(this.active){if(t.save(),t.fillStyle=this.color,t.fillRect(this.position.x-this._size/2,this.position.y-this._size/2,this._size,this._size),t.strokeStyle="#333",t.lineWidth=1,t.strokeRect(this.position.x-this._size/2,this.position.y-this._size/2,this._size,this._size),this._maxHealth>1){const s=this._size,i=3,r=this.position.y-this._size/2-6;t.fillStyle="#333",t.fillRect(this.position.x-s/2,r,s,i);const n=this.getHealthPercentage(),l=n>.6?"#4CAF50":n>.3?"#FF9800":"#F44336";t.fillStyle=l,t.fillRect(this.position.x-s/2,r,s*n,i)}t.restore()}}updateCanvasDimensions(t,s){this.canvasWidth=t,this.canvasHeight=s,this.isTargetInBounds()||this.setRandomTarget()}isTargetInBounds(){const t=this._size/2;return this.targetPosition.x>=t&&this.targetPosition.x<=this.canvasWidth-t&&this.targetPosition.y>=t&&this.targetPosition.y<=this.canvasHeight-t}get size(){return this._size}get health(){return this._health}get maxHealth(){return this._maxHealth}get soulValue(){return this._soulValue}get areaId(){return this.areaLevel}takeDamage(t=1){return this._health-=t,this._health<=0?(this.destroy(),!0):!1}isFullHealth(){return this._health>=this._maxHealth}getHealthPercentage(){return this._health/this._maxHealth}}class m{constructor(e,t,s){a(this,"walkers",[]);a(this,"targetWalkerCount",40);a(this,"canvasWidth");a(this,"canvasHeight");a(this,"spawnTimer",0);a(this,"spawnInterval",100);a(this,"areaManager");this.canvasWidth=e,this.canvasHeight=t,this.areaManager=s}update(e){this.spawnTimer+=e,this.walkers.length<this.targetWalkerCount&&this.spawnTimer>=this.spawnInterval&&(this.spawnWalker(),this.spawnTimer=0);for(let t=this.walkers.length-1;t>=0;t--){const s=this.walkers[t];s.active?s.update(e):this.walkers.splice(t,1)}}render(e){for(const t of this.walkers)t.active&&t.render(e)}spawnWalker(){const e=this.getRandomEdgePosition(),t=this.areaManager.getCurrentArea(),s=new f(e.x,e.y,this.canvasWidth,this.canvasHeight,t);this.walkers.push(s)}getRandomEdgePosition(){switch(Math.floor(Math.random()*4)){case 0:return{x:Math.random()*this.canvasWidth,y:-20};case 1:return{x:this.canvasWidth+20,y:Math.random()*this.canvasHeight};case 2:return{x:Math.random()*this.canvasWidth,y:this.canvasHeight+20};case 3:return{x:-20,y:Math.random()*this.canvasHeight};default:return{x:0,y:0}}}updateCanvasDimensions(e,t){this.canvasWidth=e,this.canvasHeight=t;for(const s of this.walkers)s.updateCanvasDimensions(e,t)}getWalkerCount(){return this.walkers.filter(e=>e.active).length}getActiveWalkers(){return this.walkers.filter(e=>e.active)}clear(){for(const e of this.walkers)e.destroy();this.walkers=[]}}class v extends c{constructor(t,s,i,r,n=1){super(t,s);a(this,"baseSpeed");a(this,"speed");a(this,"target",null);a(this,"color");a(this,"size");a(this,"canvasWidth");a(this,"canvasHeight");a(this,"seekRange");this.baseSpeed=60,this.speed=this.baseSpeed*n,this.size=10,this.canvasWidth=i,this.canvasHeight=r,this.seekRange=200;const l=["#8B0000","#DC143C","#B22222","#800080","#4B0082"];this.color=l[Math.floor(Math.random()*l.length)]}update(t){super.update(t)}updateWithWalkers(t,s){this.active&&(this.findNearestWalker(s),this.target&&this.target.active?this.seekTarget():this.velocity.set(0,0),this.update(t),this.keepInBounds())}findNearestWalker(t){let s=null,i=1/0;for(const r of t){if(!r.active)continue;const n=this.position.distanceTo(r.position);n<=this.seekRange&&n<i&&(i=n,s=r)}this.target=s}seekTarget(){if(!this.target)return;const t=h.subtract(this.target.position,this.position);t.length()>1?(t.normalize().multiply(this.speed),this.velocity=t):this.velocity.set(0,0)}keepInBounds(){const t=this.size/2;this.position.x<t?this.position.x=t:this.position.x>this.canvasWidth-t&&(this.position.x=this.canvasWidth-t),this.position.y<t?this.position.y=t:this.position.y>this.canvasHeight-t&&(this.position.y=this.canvasHeight-t)}render(t){this.active&&(t.save(),t.fillStyle=this.color,t.translate(this.position.x,this.position.y),t.rotate(Math.PI/4),t.fillRect(-this.size/2,-this.size/2,this.size,this.size),t.strokeStyle="#000",t.lineWidth=1,t.strokeRect(-this.size/2,-this.size/2,this.size,this.size),t.restore())}updateCanvasDimensions(t,s){this.canvasWidth=t,this.canvasHeight=s}getTarget(){return this.target}canAttack(t){if(!t.active)return!1;const s=this.position.distanceTo(t.position),i=(this.size+t.size)/2+2;return s<=i}updateSpeed(t){this.speed=this.baseSpeed*t}}class S{constructor(e,t,s,i,r){a(this,"zombies",[]);a(this,"canvasWidth");a(this,"canvasHeight");a(this,"resourceManager");a(this,"upgradeManager");a(this,"areaManager");this.canvasWidth=e,this.canvasHeight=t,this.resourceManager=s,this.upgradeManager=i,this.areaManager=r}update(e,t){for(let s=this.zombies.length-1;s>=0;s--){const i=this.zombies[s];i.active?(i.updateWithWalkers(e,t),this.checkCollisions(i,t)):this.zombies.splice(s,1)}}render(e){for(const t of this.zombies)t.active&&t.render(e)}spawnZombie(e){const t=this.upgradeManager.getMaxZombies();if(this.zombies.length>=t)return!1;const s=10,i=Math.max(s,Math.min(this.canvasWidth-s,e.x)),r=Math.max(s,Math.min(this.canvasHeight-s,e.y)),n=this.upgradeManager.getZombieSpeedMultiplier(),l=new v(i,r,this.canvasWidth,this.canvasHeight,n);return this.zombies.push(l),!0}checkCollisions(e,t){for(const s of t)if(s.active&&e.canAttack(s)){if(s.takeDamage(1)){const r=this.areaManager.getCurrentArea();this.resourceManager.awardSouls(1,r.soulMultiplier),console.log(`Zombie defeated a walker! Souls earned: ${r.soulMultiplier}, Total: ${this.resourceManager.getSouls()}`)}break}}updateCanvasDimensions(e,t){this.canvasWidth=e,this.canvasHeight=t;for(const s of this.zombies)s.updateCanvasDimensions(e,t)}getZombieCount(){return this.zombies.filter(e=>e.active).length}getActiveZombies(){return this.zombies.filter(e=>e.active)}clear(){for(const e of this.zombies)e.destroy();this.zombies=[]}getMaxZombies(){return this.upgradeManager.getMaxZombies()}applySpeedUpgrades(){const e=this.upgradeManager.getZombieSpeedMultiplier();for(const t of this.zombies)t.active&&t.updateSpeed(e)}}class y{constructor(e){a(this,"keys",new Set);a(this,"mousePosition",new h(0,0));a(this,"mousePressed",!1);a(this,"mouseJustPressed",!1);a(this,"canvas");this.canvas=e,this.setupEventListeners()}setupEventListeners(){window.addEventListener("keydown",e=>{this.keys.add(e.key.toLowerCase())}),window.addEventListener("keyup",e=>{this.keys.delete(e.key.toLowerCase())}),this.canvas.addEventListener("mousedown",e=>{this.handlePointerDown(e.clientX,e.clientY)}),this.canvas.addEventListener("mouseup",()=>{this.mousePressed=!1}),this.canvas.addEventListener("mousemove",e=>{this.updateMousePosition(e.clientX,e.clientY)}),this.canvas.addEventListener("touchstart",e=>{if(e.preventDefault(),e.touches.length>0){const t=e.touches[0];this.handlePointerDown(t.clientX,t.clientY)}}),this.canvas.addEventListener("touchend",e=>{e.preventDefault(),this.mousePressed=!1}),this.canvas.addEventListener("touchmove",e=>{if(e.preventDefault(),e.touches.length>0){const t=e.touches[0];this.updateMousePosition(t.clientX,t.clientY)}})}handlePointerDown(e,t){this.updateMousePosition(e,t),this.mousePressed=!0,this.mouseJustPressed=!0}updateMousePosition(e,t){const s=this.canvas.getBoundingClientRect(),i=e-s.left,r=t-s.top;this.mousePosition.set(i,r)}isKeyPressed(e){return this.keys.has(e.toLowerCase())}getMousePosition(){return this.mousePosition.clone()}isMousePressed(){return this.mousePressed}wasMouseJustPressed(){const e=this.mouseJustPressed;return this.mouseJustPressed=!1,e}update(){}destroy(){}}class w{constructor(e){a(this,"souls",0);a(this,"walkersDefeated",0);a(this,"saveManager");a(this,"baseSoulValue",1);this.saveManager=e,this.loadFromStorage()}awardSouls(e=this.baseSoulValue,t=1){const s=Math.floor(e*t);this.souls+=s,this.walkersDefeated++,this.saveToStorage()}spendSouls(e){return this.souls>=e?(this.souls-=e,this.saveToStorage(),!0):!1}getSouls(){return this.souls}getWalkersDefeated(){return this.walkersDefeated}setSouls(e){this.souls=Math.max(0,e)}setWalkersDefeated(e){this.walkersDefeated=Math.max(0,e)}saveToStorage(){this.saveManager.saveGameState({souls:this.souls,walkersDefeated:this.walkersDefeated})}loadFromStorage(){const e=this.saveManager.loadGameState();e&&(this.souls=e.souls||0,this.walkersDefeated=e.walkersDefeated||0)}reset(){this.souls=0,this.walkersDefeated=0,this.saveToStorage()}}class M{constructor(e){a(this,"upgrades",new Map);a(this,"saveManager");this.saveManager=e,this.initializeUpgrades(),this.loadFromStorage()}initializeUpgrades(){this.upgrades.set("zombie-speed",{level:0,baseCost:10,costMultiplier:1.5}),this.upgrades.set("max-zombies",{level:0,baseCost:25,costMultiplier:1.5})}getUpgradeLevel(e){const t=this.upgrades.get(e);return t?t.level:0}getUpgradeCost(e){const t=this.upgrades.get(e);return t?Math.floor(t.baseCost*Math.pow(t.costMultiplier,t.level)):0}purchaseUpgrade(e){const t=this.upgrades.get(e);return t?(t.level++,this.saveToStorage(),!0):!1}getZombieSpeedMultiplier(){return 1+this.getUpgradeLevel("zombie-speed")*.2}getMaxZombies(){return 10+this.getUpgradeLevel("max-zombies")*5}loadUpgradeData(e){for(const[t,s]of Object.entries(e))this.upgrades.has(t)&&this.upgrades.set(t,s)}getUpgradeData(){const e={};for(const[t,s]of this.upgrades)e[t]=s;return e}saveToStorage(){this.saveManager.saveGameState({upgrades:this.getUpgradeData()})}loadFromStorage(){const e=this.saveManager.loadGameState();e&&e.upgrades&&this.loadUpgradeData(e.upgrades)}reset(){this.initializeUpgrades(),this.saveToStorage()}}class k{constructor(){a(this,"currentArea",0);a(this,"areas",[{id:0,name:"Peaceful Village",walkerHealth:1,walkerSpeed:50,soulMultiplier:1,unlockRequirement:0,backgroundColor:"#87CEEB",walkerColors:["#ff6b6b","#4ecdc4","#45b7d1"]},{id:1,name:"Busy Town",walkerHealth:2,walkerSpeed:75,soulMultiplier:2,unlockRequirement:25,backgroundColor:"#DDA0DD",walkerColors:["#96ceb4","#feca57","#ff9ff3"]},{id:2,name:"Fortified City",walkerHealth:4,walkerSpeed:100,soulMultiplier:4,unlockRequirement:100,backgroundColor:"#F0E68C",walkerColors:["#54a0ff","#5f27cd","#00d2d3"]},{id:3,name:"Military Base",walkerHealth:8,walkerSpeed:125,soulMultiplier:8,unlockRequirement:250,backgroundColor:"#CD853F",walkerColors:["#2d3436","#636e72","#74b9ff"]},{id:4,name:"Fortress Capital",walkerHealth:16,walkerSpeed:150,soulMultiplier:16,unlockRequirement:500,backgroundColor:"#8B4513",walkerColors:["#e17055","#fdcb6e","#6c5ce7"]}]);this.loadFromStorage()}getCurrentArea(){return this.areas[this.currentArea]}getArea(e){return this.areas.find(t=>t.id===e)||null}getAllAreas(){return[...this.areas]}isAreaUnlocked(e,t){const s=this.getArea(e);return s?t>=s.unlockRequirement:!1}getHighestUnlockedArea(e){let t=0;for(const s of this.areas)if(e>=s.unlockRequirement)t=s.id;else break;return t}setCurrentArea(e,t){return this.isAreaUnlocked(e,t)?(this.currentArea=e,this.saveToStorage(),!0):!1}getCurrentAreaId(){return this.currentArea}getProgressToNextArea(e){const t=this.currentArea+1,s=this.getArea(t);if(!s)return null;const i=e,r=s.unlockRequirement,n=Math.min(i/r*100,100);return{current:i,required:r,percentage:n}}hasNextArea(){return this.currentArea<this.areas.length-1}autoAdvanceArea(e){const t=this.getHighestUnlockedArea(e);return t>this.currentArea?(this.currentArea=t,this.saveToStorage(),!0):!1}saveToStorage(){try{const e={currentArea:this.currentArea};localStorage.setItem("endless-horde-area",JSON.stringify(e))}catch(e){console.warn("Failed to save area state:",e)}}loadFromStorage(){try{const e=localStorage.getItem("endless-horde-area");if(e){const t=JSON.parse(e);this.currentArea=t.currentArea||0}}catch(e){console.warn("Failed to load area state, using defaults:",e),this.currentArea=0}}reset(){this.currentArea=0,this.saveToStorage()}}class x{constructor(){a(this,"SAVE_KEY","endless-horde-complete-save");a(this,"SAVE_VERSION",1)}saveGameState(e){try{const t=this.loadGameState(),s={souls:e.souls??(t==null?void 0:t.souls)??0,walkersDefeated:e.walkersDefeated??(t==null?void 0:t.walkersDefeated)??0,currentArea:e.currentArea??(t==null?void 0:t.currentArea)??0,upgrades:e.upgrades??(t==null?void 0:t.upgrades)??{},saveVersion:this.SAVE_VERSION,lastSaved:Date.now()};return localStorage.setItem(this.SAVE_KEY,JSON.stringify(s)),console.log("Game state saved successfully"),!0}catch(t){return console.warn("Failed to save game state:",t),!1}}loadGameState(){try{const e=localStorage.getItem(this.SAVE_KEY);if(!e)return null;const t=JSON.parse(e);return t.saveVersion!==this.SAVE_VERSION?(console.warn("Save version mismatch, migrating save data"),this.migrateSaveData(t)):t}catch(e){return console.warn("Failed to load game state:",e),null}}migrateSaveData(e){try{const t=localStorage.getItem("endless-horde-save"),s=localStorage.getItem("endless-horde-upgrades"),i=localStorage.getItem("endless-horde-area"),r={souls:0,walkersDefeated:0,currentArea:0,upgrades:{},saveVersion:this.SAVE_VERSION,lastSaved:Date.now()};if(t){const n=JSON.parse(t);r.souls=n.souls||0,r.walkersDefeated=n.walkersDefeated||0}if(s){const n=JSON.parse(s);r.upgrades=n}if(i){const n=JSON.parse(i);r.currentArea=n.currentArea||0}return this.saveGameState(r),localStorage.removeItem("endless-horde-save"),localStorage.removeItem("endless-horde-upgrades"),localStorage.removeItem("endless-horde-area"),console.log("Successfully migrated save data to new format"),r}catch(t){return console.warn("Failed to migrate save data:",t),null}}hasSaveData(){return localStorage.getItem(this.SAVE_KEY)!==null}deleteSaveData(){try{return localStorage.removeItem(this.SAVE_KEY),localStorage.removeItem("endless-horde-save"),localStorage.removeItem("endless-horde-upgrades"),localStorage.removeItem("endless-horde-area"),console.log("Save data deleted successfully"),!0}catch(e){return console.warn("Failed to delete save data:",e),!1}}exportSaveData(){try{const e=this.loadGameState();return e?JSON.stringify(e,null,2):null}catch(e){return console.warn("Failed to export save data:",e),null}}importSaveData(e){try{const t=JSON.parse(e);if(typeof t.souls!="number"||typeof t.walkersDefeated!="number"||typeof t.currentArea!="number")throw new Error("Invalid save data format");return this.saveGameState(t)}catch(t){return console.warn("Failed to import save data:",t),!1}}getSaveMetadata(){const e=this.loadGameState();return e?{lastSaved:new Date(e.lastSaved),saveVersion:e.saveVersion}:null}}class A{constructor(e,t,s,i,r){a(this,"resourceManager");a(this,"upgradeManager");a(this,"areaManager");a(this,"canvasWidth");a(this,"canvasHeight");a(this,"upgradeButtons",[]);a(this,"showUpgradeMenu",!1);a(this,"onUpgradePurchased");this.resourceManager=e,this.upgradeManager=t,this.areaManager=s,this.canvasWidth=i,this.canvasHeight=r,this.initializeUpgradeButtons()}initializeUpgradeButtons(){this.upgradeButtons=[{id:"zombie-speed",label:"Zombie Speed",cost:this.upgradeManager.getUpgradeCost("zombie-speed"),description:"Increase zombie movement speed (+20%)",x:0,y:0,width:180,height:50,enabled:!1,level:this.upgradeManager.getUpgradeLevel("zombie-speed")},{id:"max-zombies",label:"Max Zombies",cost:this.upgradeManager.getUpgradeCost("max-zombies"),description:"Increase maximum zombie count (+5)",x:0,y:0,width:180,height:50,enabled:!1,level:this.upgradeManager.getUpgradeLevel("max-zombies")}]}update(){const e=this.resourceManager.getSouls();for(let t=0;t<this.upgradeButtons.length;t++){const s=this.upgradeButtons[t];s.cost=this.upgradeManager.getUpgradeCost(s.id),s.level=this.upgradeManager.getUpgradeLevel(s.id),s.enabled=e>=s.cost,this.showUpgradeMenu&&(s.x=this.canvasWidth/2-s.width/2,s.y=this.canvasHeight/2-100+t*70)}}render(e){this.renderSoulsCounter(e),this.renderAreaInfo(e),this.renderControls(e),this.showUpgradeMenu&&this.renderUpgradeMenu(e)}renderSoulsCounter(e){e.save(),e.textAlign="left",e.textBaseline="top",e.font="bold 18px Arial",e.fillStyle="#FFD700";const t=this.resourceManager.getSouls(),s=this.resourceManager.getWalkersDefeated();e.fillText(`Souls: ${t}`,10,35),e.font="14px Arial",e.fillStyle="#CCCCCC",e.fillText(`Walkers Defeated: ${s}`,10,60),e.restore()}renderAreaInfo(e){e.save();const t=this.areaManager.getCurrentArea(),s=this.resourceManager.getWalkersDefeated();e.textAlign="center",e.textBaseline="top",e.font="bold 16px Arial",e.fillStyle="#FFFFFF";const i=this.canvasWidth/2;e.fillText(t.name,i,10),e.font="12px Arial",e.fillStyle="#FFD700",e.fillText(`Soul Multiplier: x${t.soulMultiplier}`,i,30);const r=this.areaManager.getProgressToNextArea(s);if(r){e.font="11px Arial",e.fillStyle="#CCCCCC",e.fillText(`Next Area: ${r.current}/${r.required} (${Math.floor(r.percentage)}%)`,i,45);const n=120,l=4,d=i-n/2,u=60;e.fillStyle="#333333",e.fillRect(d,u,n,l),e.fillStyle="#4CAF50",e.fillRect(d,u,n*(r.percentage/100),l)}else e.font="11px Arial",e.fillStyle="#FFD700",e.fillText("Maximum Area Reached!",i,45);e.restore()}renderControls(e){e.save(),e.textAlign="left",e.textBaseline="bottom",e.font="14px Arial",e.fillStyle="#666",e.fillText("Press U to open upgrades",10,this.canvasHeight-50),e.restore()}renderUpgradeMenu(e){e.save(),e.fillStyle="rgba(0, 0, 0, 0.8)",e.fillRect(0,0,this.canvasWidth,this.canvasHeight),e.fillStyle="#FFFFFF",e.font="bold 24px Arial",e.textAlign="center",e.textBaseline="middle",e.fillText("UPGRADES",this.canvasWidth/2,this.canvasHeight/2-150),e.font="18px Arial",e.fillStyle="#FFD700",e.fillText(`Souls: ${this.resourceManager.getSouls()}`,this.canvasWidth/2,this.canvasHeight/2-120);for(const t of this.upgradeButtons)this.renderUpgradeButton(e,t);e.fillStyle="#CCCCCC",e.font="16px Arial",e.fillText("Press U to close",this.canvasWidth/2,this.canvasHeight/2+150),e.restore()}renderUpgradeButton(e,t){e.save(),e.fillStyle=t.enabled?"#4CAF50":"#666666",e.fillRect(t.x,t.y,t.width,t.height),e.strokeStyle=t.enabled?"#45a049":"#555555",e.lineWidth=2,e.strokeRect(t.x,t.y,t.width,t.height),e.fillStyle=t.enabled?"#FFFFFF":"#AAAAAA",e.font="bold 14px Arial",e.textAlign="center",e.textBaseline="middle";const s=t.x+t.width/2,i=t.y+t.height/2;e.fillText(`${t.label} (Lv.${t.level})`,s,i-12),e.font="10px Arial",e.fillText(t.description,s,i),e.font="12px Arial",e.fillText(`Cost: ${t.cost} souls`,s,i+12),e.restore()}toggleUpgradeMenu(){this.showUpgradeMenu=!this.showUpgradeMenu}isUpgradeMenuOpen(){return this.showUpgradeMenu}handleClick(e){if(!this.showUpgradeMenu)return!1;for(const t of this.upgradeButtons)if(this.isPointInButton(e,t)&&t.enabled)return this.purchaseUpgrade(t.id);return!1}isPointInButton(e,t){return e.x>=t.x&&e.x<=t.x+t.width&&e.y>=t.y&&e.y<=t.y+t.height}purchaseUpgrade(e){const t=this.upgradeButtons.find(s=>s.id===e);return!t||!t.enabled?!1:this.resourceManager.spendSouls(t.cost)?(this.upgradeManager.purchaseUpgrade(e),console.log(`Purchased upgrade: ${t.label} (Level ${t.level+1})`),this.onUpgradePurchased&&this.onUpgradePurchased(e),!0):!1}updateCanvasDimensions(e,t){this.canvasWidth=e,this.canvasHeight=t}getUpgradeButton(e){return this.upgradeButtons.find(t=>t.id===e)}setOnUpgradePurchased(e){this.onUpgradePurchased=e}}class b{constructor(){a(this,"canvas");a(this,"ctx");a(this,"devicePixelRatio");a(this,"lastTime",0);a(this,"accumulator",0);a(this,"fixedTimeStep",1e3/60);a(this,"animationId",0);a(this,"isPaused",!1);a(this,"lastPauseKeyState",!1);a(this,"lastUpgradeKeyState",!1);a(this,"fps",0);a(this,"frameCount",0);a(this,"fpsLastTime",0);a(this,"walkerSystem");a(this,"zombieSystem");a(this,"inputManager");a(this,"resourceManager");a(this,"upgradeManager");a(this,"areaManager");a(this,"saveManager");a(this,"hud");if(this.canvas=document.getElementById("gameCanvas"),!this.canvas)throw new Error("Canvas element not found");const e=this.canvas.getContext("2d");if(!e)throw new Error("Could not get 2D context");this.ctx=e,this.devicePixelRatio=window.devicePixelRatio||1,this.setupCanvas(),this.setupInput(),this.initializeSystems(),this.startGameLoop()}setupCanvas(){const e=Math.min(window.innerWidth-40,800),t=Math.min(window.innerHeight-120,600);this.canvas.style.width=e+"px",this.canvas.style.height=t+"px",this.canvas.width=e*this.devicePixelRatio,this.canvas.height=t*this.devicePixelRatio,this.ctx.scale(this.devicePixelRatio,this.devicePixelRatio)}setupInput(){window.addEventListener("resize",()=>{if(this.setupCanvas(),this.walkerSystem&&this.zombieSystem&&this.hud){const e=this.canvas.width/this.devicePixelRatio,t=this.canvas.height/this.devicePixelRatio;this.walkerSystem.updateCanvasDimensions(e,t),this.zombieSystem.updateCanvasDimensions(e,t),this.hud.updateCanvasDimensions(e,t)}})}initializeSystems(){const e=this.canvas.width/this.devicePixelRatio,t=this.canvas.height/this.devicePixelRatio;this.saveManager=new x,this.resourceManager=new w(this.saveManager),this.upgradeManager=new M(this.saveManager),this.areaManager=new k,this.walkerSystem=new m(e,t,this.areaManager),this.zombieSystem=new S(e,t,this.resourceManager,this.upgradeManager,this.areaManager),this.inputManager=new y(this.canvas),this.hud=new A(this.resourceManager,this.upgradeManager,this.areaManager,e,t),this.hud.setOnUpgradePurchased(s=>{this.handleUpgradePurchased(s)}),this.loadGameState()}togglePause(){this.isPaused=!this.isPaused,console.log(this.isPaused?"Game Paused":"Game Resumed")}handleUpgradePurchased(e){console.log(`Applying upgrade: ${e}`),e==="zombie-speed"&&this.zombieSystem.applySpeedUpgrades()}startGameLoop(){this.lastTime=performance.now(),this.fpsLastTime=this.lastTime,this.gameLoop(this.lastTime)}gameLoop(e){this.animationId=requestAnimationFrame(i=>this.gameLoop(i));const t=e-this.lastTime;if(this.lastTime=e,this.updateFPS(e),!this.isPaused)for(this.accumulator+=t;this.accumulator>=this.fixedTimeStep;)this.update(this.fixedTimeStep),this.accumulator-=this.fixedTimeStep;const s=this.accumulator/this.fixedTimeStep;this.render(s)}updateFPS(e){this.frameCount++,e-this.fpsLastTime>=1e3&&(this.fps=Math.round(this.frameCount*1e3/(e-this.fpsLastTime)),this.frameCount=0,this.fpsLastTime=e)}update(e){this.inputManager.update(),this.handleInput(),this.checkAreaProgression(),this.walkerSystem.update(e);const t=this.walkerSystem.getActiveWalkers();this.zombieSystem.update(e,t),this.hud.update()}handleInput(){const e=this.inputManager.isKeyPressed("p");e&&!this.lastPauseKeyState&&this.togglePause(),this.lastPauseKeyState=e;const t=this.inputManager.isKeyPressed("u");if(t&&!this.lastUpgradeKeyState&&this.hud.toggleUpgradeMenu(),this.lastUpgradeKeyState=t,this.inputManager.wasMouseJustPressed()){const s=this.inputManager.getMousePosition();this.hud.isUpgradeMenuOpen()?this.hud.handleClick(s):this.zombieSystem.spawnZombie(s)||console.log("Cannot spawn more zombies - limit reached!")}}render(e){const t=this.canvas.width/this.devicePixelRatio,s=this.canvas.height/this.devicePixelRatio,i=this.areaManager.getCurrentArea();if(this.ctx.fillStyle=i.backgroundColor,this.ctx.fillRect(0,0,t,s),this.walkerSystem.render(this.ctx),this.zombieSystem.render(this.ctx),this.isPaused){this.ctx.save(),this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(0,0,t,s),this.ctx.fillStyle="#ffffff",this.ctx.font="32px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle";const r=t/2,n=s/2;this.ctx.fillText("PAUSED",r,n),this.ctx.font="16px Arial",this.ctx.fillText("Press P to resume",r,n+40),this.ctx.restore()}this.drawFPS(),this.drawUI(),this.hud.render(this.ctx)}drawFPS(){this.ctx.save(),this.ctx.textAlign="left",this.ctx.textBaseline="top",this.ctx.font="16px Arial",this.fps>=50?this.ctx.fillStyle="#00ff00":this.fps>=30?this.ctx.fillStyle="#ffff00":this.ctx.fillStyle="#ff0000",this.ctx.fillText(`FPS: ${this.fps}`,10,10),this.ctx.restore()}drawUI(){this.ctx.save();const e=this.canvas.height/this.devicePixelRatio,t=this.canvas.width/this.devicePixelRatio;this.ctx.textAlign="right",this.ctx.textBaseline="top",this.ctx.font="16px Arial",this.ctx.fillStyle="#ffffff";const s=this.walkerSystem.getWalkerCount(),i=this.zombieSystem.getZombieCount(),r=this.zombieSystem.getMaxZombies();this.ctx.fillText(`Walkers: ${s}`,t-10,10),this.ctx.fillText(`Zombies: ${i}/${r}`,t-10,30),this.ctx.textAlign="left",this.ctx.textBaseline="bottom",this.ctx.font="14px Arial",this.ctx.fillStyle="#666",this.ctx.fillText("Press P to pause/resume",10,e-30),this.ctx.fillText("Click/tap to spawn zombies",10,e-10),this.ctx.restore()}loadGameState(){const e=this.saveManager.loadGameState();e?(this.resourceManager.setSouls(e.souls),this.resourceManager.setWalkersDefeated(e.walkersDefeated),e.upgrades&&this.upgradeManager.loadUpgradeData(e.upgrades),this.areaManager.setCurrentArea(e.currentArea,e.walkersDefeated),console.log("Game state loaded successfully")):console.log("No save data found, starting fresh game")}checkAreaProgression(){const e=this.resourceManager.getWalkersDefeated();if(this.areaManager.autoAdvanceArea(e)){const s=this.areaManager.getCurrentArea();console.log(`Advanced to new area: ${s.name}`),this.saveManager.saveGameState({currentArea:this.areaManager.getCurrentAreaId()})}}destroy(){this.animationId&&cancelAnimationFrame(this.animationId)}}document.addEventListener("DOMContentLoaded",()=>{try{new b,console.log("Endless Horde game initialized successfully")}catch(o){console.error("Failed to initialize game:",o)}});
